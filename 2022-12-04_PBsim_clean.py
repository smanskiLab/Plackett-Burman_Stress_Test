import math
import pandas as pd
import numpy as np
import scipy
import matplotlib.pyplot as plt
import seaborn as sns
from sympy import *
from progress.bar import ChargingBar
import random

#Run parameter controls

reps=1 #Number of replicates

log=True #Plot minimal effect size in log2? If False plots linear

varL = [0,0.01,0.025,0.05,0.1,0.25,0.5] #Variable level variance 0.01=1% variance. List all variances you want to run
mVarL = [0,0.01,0.025,0.05,0.1,0.25,0.5] #Measuremen variance 0.01=1% variance. List all variances you want to run
tVarL = [0] #Measurement time variance 0.01=1% variance. List all variances you want to run
numShifted = [0,1,2,4,8] #How many variable-level pairs will be shifted up 5 fold. Can change fold increase below

ths=0.05 #significant p-value

#The functions you will be running
#Write the functions out by replacing x_n with PB[:,n] where n is the variable index
def functions(PB,tV):

    L=[]

    #linear sample
    L.append(np.add(np.add(np.add(np.add(np.add(np.add(np.add(4*PB[:,0],2*PB[:,1]),1*PB[:,2]),0.5*PB[:,3]),0.25*PB[:,4]),0.125*PB[:,5]),0.0625*PB[:,6]),0*PB[:,7]))

    #sum of each effect squared
    L.append(np.multiply(4*PB[:,0],4*PB[:,0])+np.multiply(2*PB[:,1],2*PB[:,1])+np.multiply(1*PB[:,2],1*PB[:,2])+np.multiply(0.5*PB[:,3],0.5*PB[:,3])+np.multiply(0.25*PB[:,4],0.25*PB[:,4])+np.multiply(0.125*PB[:,5],0.125*PB[:,5])+np.multiply(0.0625*PB[:,6],0.0625*PB[:,6]))

    #Summation with 2^x effect sizes with nonlinear geometric mean at end
    L.append(np.add(np.add(np.add(np.add(np.add(np.add(np.add(4*PB[:,0],2*PB[:,1]),1*PB[:,2]),0.5*PB[:,3]),0.25*PB[:,4]),0.125*PB[:,5]),0.0625*PB[:,6]),0*PB[:,7]) + np.power(np.multiply(np.multiply(np.multiply(np.multiply(np.multiply(np.multiply(4*PB[:,0],2*PB[:,1]),1*PB[:,2]),0.5*PB[:,3]),0.25*PB[:,4]),0.125*PB[:,5]),0.0625*PB[:,6]),(1/1)))

    #All pairwise interations weighted product of effect size
    L.append(np.multiply(4*PB[:,0],2*PB[:,1])+np.multiply(4*PB[:,0],1*PB[:,2])+np.multiply(4*PB[:,0],1*PB[:,2])+np.multiply(4*PB[:,0],0.5*PB[:,3])+np.multiply(4*PB[:,0],0.25*PB[:,4])+np.multiply(4*PB[:,0],0.125*PB[:,5])+np.multiply(4*PB[:,0],0.0625*PB[:,6])+ np.multiply(2*PB[:,1],1*PB[:,2])+np.multiply(2*PB[:,1],1*PB[:,2])+np.multiply(2*PB[:,1],0.5*PB[:,3])+np.multiply(2*PB[:,1],0.25*PB[:,4])+np.multiply(2*PB[:,1],0.125*PB[:,5])+np.multiply(2*PB[:,1],0.0625*PB[:,6])+ np.multiply(1*PB[:,2],0.5*PB[:,3])+np.multiply(1*PB[:,2],0.25*PB[:,4])+np.multiply(1*PB[:,2],0.125*PB[:,5])+np.multiply(1*PB[:,2],0.0625*PB[:,6])+ np.multiply(0.5*PB[:,3],0.25*PB[:,4])+np.multiply(0.5*PB[:,3],0.125*PB[:,5])+np.multiply(0.5*PB[:,3],0.0625*PB[:,6])+ np.multiply(0.25*PB[:,4],0.125*PB[:,5])+np.multiply(0.25*PB[:,4],0.0625*PB[:,6])+ np.multiply(0.125*PB[:,5],0.0625*PB[:,6]))
    

    return(L)



#Array of PB design levels variable is a list of the variable sizes
'''
#2 level 32 variable PB
levels=[1,2]
PBmat = np.array([[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
         [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2],
         [2,2,2,1,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2],
         [2,2,2,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2],
         [2,2,1,2,2,1,1,1,1,2,2,2,2,1,1,1,1,2,2,2,1,1,1,1,2,2,2,1,1,1,2],
         [2,2,1,2,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,2,2,2,1,1,1,2],
         [2,2,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,2],
         [2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,1,1,1,1,1,1,2],
         [2,1,2,2,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,2,2,1,1,2,1,1,1],
         [2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,2,1,1,2,2,1,1,2,1,1,1],
         [2,1,2,1,2,1,2,2,1,1,2,2,1,2,1,1,2,2,1,1,1,2,2,1,1,2,2,2,1,1,1],
         [2,1,2,1,1,2,1,1,2,2,1,1,2,1,2,2,1,1,2,2,1,2,2,1,1,2,2,2,1,1,1],
         [2,1,1,2,2,1,2,2,1,2,1,1,2,1,2,2,1,2,1,1,1,2,2,1,2,1,1,1,2,2,1],
         [2,1,1,2,1,2,1,1,2,1,2,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,1,1,2,2,1],
         [2,1,1,1,2,2,1,1,2,1,2,2,1,1,2,2,1,2,1,1,2,1,1,2,1,2,2,1,2,2,1],
         [2,1,1,1,1,1,2,2,1,2,1,1,2,2,1,1,2,1,2,2,2,1,1,2,1,2,2,1,2,2,1],
         [1,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,1,2,1,1],
         [1,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1],
         [1,2,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1],
         [1,2,2,1,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,1],
         [1,2,1,2,2,2,1,2,1,1,2,1,2,2,1,2,1,1,2,1,2,1,2,1,1,2,1,2,1,2,1],
         [1,2,1,2,1,1,2,1,2,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,1],
         [1,2,1,1,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,1,2,1,2,2,1,2,2,1,2,1],
         [1,2,1,1,1,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,2,1,2,2,1,2,1],
         [1,1,2,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,2,2,1,1,2,1,1,2,2],
         [1,1,2,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,1,2,2,1,1,2,1,1,2,2],
         [1,1,2,1,2,2,2,1,1,2,2,1,1,1,1,2,2,1,1,2,2,2,1,1,2,2,1,1,1,2,2],
         [1,1,2,1,1,1,1,2,2,1,1,2,2,2,2,1,1,2,2,1,2,2,1,1,2,2,1,1,1,2,2],
         [1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,1,1,2,2,2,1,1,1,1,2,2,2,1,2],
         [1,1,1,2,1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,2,2,1,1,1,1,2,2,2,1,2],
         [1,1,1,1,2,1,1,2,2,2,2,1,1,2,2,1,1,1,1,2,1,1,2,2,2,2,1,2,2,1,2],
         [1,1,1,1,1,2,2,1,1,1,1,2,2,1,1,2,2,2,2,1,1,1,2,2,2,2,1,2,2,1,2]])
'''

#Log- 5 level PB matrix (used in paper)
levels=[1,3.4,10,34,100]
PBmat=np.array([[3.4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [3.4,1,1,1,3.4,3.4,100,100,3.4,10,34,100,3.4,3.4,3.4,3.4,10,10,10,10,34,34,34,34,100,100,100,100,1,1,3.4],
                [3.4,1,1,1,10,10,3.4,34,10,100,3.4,34,10,10,10,10,100,100,100,100,3.4,3.4,3.4,3.4,34,34,34,34,1,1,10],
                [3.4,1,1,1,34,34,34,10,34,3.4,100,10,34,34,34,34,3.4,3.4,3.4,3.4,100,100,100,100,10,10,10,10,1,1,34],
                [3.4,1,1,1,100,100,10,3.4,100,34,10,3.4,100,100,100,100,34,34,34,34,10,10,10,10,3.4,3.4,3.4,3.4,1,1,100],
                [1,10,10,34,1,1,1,1,3.4,3.4,3.4,3.4,3.4,10,34,100,3.4,10,34,100,3.4,10,34,100,3.4,10,34,100,1,3.4,1],
                [1,10,10,34,3.4,3.4,100,100,10,34,100,1,10,34,100,1,34,100,1,3.4,100,1,3.4,10,1,3.4,10,34,1,3.4,3.4],
                [1,10,10,34,10,10,3.4,34,34,1,10,100,34,100,1,3.4,1,3.4,10,34,10,34,100,1,100,1,3.4,10,1,3.4,10],
                [1,10,10,34,34,34,34,10,100,10,1,34,100,1,3.4,10,10,34,100,1,1,3.4,10,34,34,100,1,3.4,1,3.4,34],
                [1,10,10,34,100,100,10,3.4,1,100,34,10,1,3.4,10,34,100,1,3.4,10,34,100,1,3.4,10,34,100,1,1,3.4,100],
                [34,34,34,3.4,1,1,1,1,10,10,10,10,10,100,3.4,34,10,100,3.4,34,10,100,3.4,34,10,100,3.4,34,1,10,1],
                [34,34,34,3.4,3.4,3.4,100,100,34,100,1,3.4,34,1,10,100,100,3.4,34,1,1,10,100,3.4,3.4,34,1,10,1,10,3.4],
                [34,34,34,3.4,10,10,3.4,34,100,3.4,34,1,100,3.4,34,1,3.4,34,1,10,34,1,10,100,1,10,100,3.4,1,10,10],
                [34,34,34,3.4,34,34,34,10,1,34,3.4,100,1,10,100,3.4,34,1,10,100,3.4,34,1,10,100,3.4,34,1,1,10,34],
                [34,34,34,3.4,100,100,10,3.4,3.4,1,100,34,3.4,34,1,10,1,10,100,3.4,100,3.4,34,1,34,1,10,100,1,10,100],
                [10,3.4,100,100,1,1,1,1,34,34,34,34,34,3.4,100,10,34,3.4,100,10,34,3.4,100,10,34,3.4,100,10,1,34,1],
                [10,3.4,100,100,3.4,3.4,100,100,100,1,3.4,10,100,10,1,34,1,34,3.4,100,3.4,100,10,1,10,1,34,3.4,1,34,3.4],
                [10,3.4,100,100,10,10,3.4,34,1,10,100,3.4,1,34,3.4,100,10,1,34,3.4,100,10,1,34,3.4,100,10,1,1,34,10],
                [10,3.4,100,100,34,34,34,10,3.4,100,10,1,3.4,100,10,1,100,10,1,34,10,1,34,3.4,1,34,3.4,100,1,34,34],
                [10,3.4,100,100,100,100,10,3.4,10,3.4,1,100,10,1,34,3.4,3.4,100,10,1,1,34,3.4,100,100,10,1,34,1,34,100],
                [100,100,3.4,10,1,1,1,1,100,100,100,100,100,34,10,3.4,100,34,10,3.4,100,34,10,3.4,100,34,10,3.4,1,100,1],
                [100,100,3.4,10,3.4,3.4,100,100,1,3.4,10,34,1,100,34,10,3.4,1,100,34,10,3.4,1,100,34,10,3.4,1,1,100,3.4],
                [100,100,3.4,10,10,10,3.4,34,3.4,34,1,10,3.4,1,100,34,34,10,3.4,1,1,100,34,10,10,3.4,1,100,1,100,10],
                [100,100,3.4,10,34,34,34,10,10,1,34,3.4,10,3.4,1,100,1,100,34,10,34,10,3.4,1,3.4,1,100,34,1,100,34],
                [100,100,3.4,10,100,100,10,3.4,34,10,3.4,1,34,10,3.4,1,10,3.4,1,100,3.4,1,100,34,1,100,34,10,1,100,100],
                [1,3.4,34,10,3.4,34,3.4,3.4,1,1,1,1,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,1,1],
                [1,3.4,34,10,10,100,34,1,3.4,10,34,100,10,10,10,10,34,34,34,34,100,100,100,100,1,1,1,1,3.4,1,3.4],
                [1,3.4,34,10,34,1,10,100,10,100,3.4,34,34,34,34,34,1,1,1,1,10,10,10,10,100,100,100,100,3.4,1,10],
                [1,3.4,34,10,100,3.4,1,34,34,3.4,100,10,100,100,100,100,10,10,10,10,1,1,1,1,34,34,34,34,3.4,1,34],
                [1,3.4,34,10,1,10,100,10,100,34,10,3.4,1,1,1,1,100,100,100,100,34,34,34,34,10,10,10,10,3.4,1,100],
                [34,100,100,1,3.4,34,3.4,3.4,3.4,3.4,3.4,3.4,10,34,100,1,10,34,100,1,10,34,100,1,10,34,100,1,3.4,3.4,1],
                [34,100,100,1,10,100,34,1,10,34,100,1,34,100,1,3.4,100,1,3.4,10,1,3.4,10,34,3.4,10,34,100,3.4,3.4,3.4],
                [34,100,100,1,34,1,10,100,34,1,10,100,100,1,3.4,10,3.4,10,34,100,34,100,1,3.4,1,3.4,10,34,3.4,3.4,10],
                [34,100,100,1,100,3.4,1,34,100,10,1,34,1,3.4,10,34,34,100,1,3.4,3.4,10,34,100,100,1,3.4,10,3.4,3.4,34],
                [34,100,100,1,1,10,100,10,1,100,34,10,3.4,10,34,100,1,3.4,10,34,100,1,3.4,10,34,100,1,3.4,3.4,3.4,100],
                [10,1,3.4,34,3.4,34,3.4,3.4,10,10,10,10,34,1,10,100,34,1,10,100,34,1,10,100,34,1,10,100,3.4,10,1],
                [10,1,3.4,34,10,100,34,1,34,100,1,3.4,100,3.4,34,1,1,10,100,3.4,3.4,34,1,10,10,100,3.4,34,3.4,10,3.4],
                [10,1,3.4,34,34,1,10,100,100,3.4,34,1,1,10,100,3.4,10,100,3.4,34,100,3.4,34,1,3.4,34,1,10,3.4,10,10],
                [10,1,3.4,34,100,3.4,1,34,1,34,3.4,100,3.4,34,1,10,100,3.4,34,1,10,100,3.4,34,1,10,100,3.4,3.4,10,34],
                [10,1,3.4,34,1,10,100,10,3.4,1,100,34,10,100,3.4,34,3.4,34,1,10,1,10,100,3.4,100,3.4,34,1,3.4,10,100],
                [100,10,1,3.4,3.4,34,3.4,3.4,34,34,34,34,100,10,1,34,100,10,1,34,100,10,1,34,100,10,1,34,3.4,34,1],
                [100,10,1,3.4,10,100,34,1,100,1,3.4,10,1,34,3.4,100,3.4,100,10,1,10,1,34,3.4,34,3.4,100,10,3.4,34,3.4],
                [100,10,1,3.4,34,1,10,100,1,10,100,3.4,3.4,100,10,1,34,3.4,100,10,1,34,3.4,100,10,1,34,3.4,3.4,34,10],
                [100,10,1,3.4,100,3.4,1,34,3.4,100,10,1,10,1,34,3.4,1,34,3.4,100,34,3.4,100,10,3.4,100,10,1,3.4,34,34],
                [100,10,1,3.4,1,10,100,10,10,3.4,1,100,34,3.4,100,10,10,1,34,3.4,3.4,100,10,1,1,34,3.4,100,3.4,34,100],
                [3.4,34,10,100,3.4,34,3.4,3.4,100,100,100,100,1,100,34,10,1,100,34,10,1,100,34,10,1,100,34,10,3.4,100,1],
                [3.4,34,10,100,10,100,34,1,1,3.4,10,34,3.4,1,100,34,10,3.4,1,100,34,10,3.4,1,100,34,10,3.4,3.4,100,3.4],
                [3.4,34,10,100,34,1,10,100,3.4,34,1,10,10,3.4,1,100,100,34,10,3.4,3.4,1,100,34,34,10,3.4,1,3.4,100,10],
                [3.4,34,10,100,100,3.4,1,34,10,1,34,3.4,34,10,3.4,1,3.4,1,100,34,100,34,10,3.4,10,3.4,1,100,3.4,100,34],
                [3.4,34,10,100,1,10,100,10,34,10,3.4,1,100,34,10,3.4,34,10,3.4,1,10,3.4,1,100,3.4,1,100,34,3.4,100,100],
                [34,10,3.4,100,10,3.4,10,10,1,1,1,1,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,1],
                [34,10,3.4,100,34,10,1,3.4,3.4,10,34,100,34,34,34,34,100,100,100,100,1,1,1,1,3.4,3.4,3.4,3.4,10,1,3.4],
                [34,10,3.4,100,100,34,100,1,10,100,3.4,34,100,100,100,100,3.4,3.4,3.4,3.4,34,34,34,34,1,1,1,1,10,1,10],
                [34,10,3.4,100,1,100,3.4,100,34,3.4,100,10,1,1,1,1,34,34,34,34,3.4,3.4,3.4,3.4,100,100,100,100,10,1,34],
                [34,10,3.4,100,3.4,1,34,34,100,34,10,3.4,3.4,3.4,3.4,3.4,1,1,1,1,100,100,100,100,34,34,34,34,10,1,100],
                [10,34,1,10,10,3.4,10,10,3.4,3.4,3.4,3.4,34,100,1,3.4,34,100,1,3.4,34,100,1,3.4,34,100,1,3.4,10,3.4,1],
                [10,34,1,10,34,10,1,3.4,10,34,100,1,100,1,3.4,10,1,3.4,10,34,3.4,10,34,100,10,34,100,1,10,3.4,3.4],
                [10,34,1,10,100,34,100,1,34,1,10,100,1,3.4,10,34,10,34,100,1,100,1,3.4,10,3.4,10,34,100,10,3.4,10],
                [10,34,1,10,1,100,3.4,100,100,10,1,34,3.4,10,34,100,100,1,3.4,10,10,34,100,1,1,3.4,10,34,10,3.4,34],
                [10,34,1,10,3.4,1,34,34,1,100,34,10,10,34,100,1,3.4,10,34,100,1,3.4,10,34,100,1,3.4,10,10,3.4,100],
                [100,3.4,10,1,10,3.4,10,10,10,10,10,10,100,3.4,34,1,100,3.4,34,1,100,3.4,34,1,100,3.4,34,1,10,10,1],
                [100,3.4,10,1,34,10,1,3.4,34,100,1,3.4,1,10,100,3.4,3.4,34,1,10,10,100,3.4,34,34,1,10,100,10,10,3.4],
                [100,3.4,10,1,100,34,100,1,100,3.4,34,1,3.4,34,1,10,34,1,10,100,1,10,100,3.4,10,100,3.4,34,10,10,10],
                [100,3.4,10,1,1,100,3.4,100,1,34,3.4,100,10,100,3.4,34,1,10,100,3.4,34,1,10,100,3.4,34,1,10,10,10,34],
                [100,3.4,10,1,3.4,1,34,34,3.4,1,100,34,34,1,10,100,10,100,3.4,34,3.4,34,1,10,1,10,100,3.4,10,10,100],
                [3.4,100,34,34,10,3.4,10,10,34,34,34,34,1,34,3.4,100,1,34,3.4,100,1,34,3.4,100,1,34,3.4,100,10,34,1],
                [3.4,100,34,34,34,10,1,3.4,100,1,3.4,10,3.4,100,10,1,10,1,34,3.4,34,3.4,100,10,100,10,1,34,10,34,3.4],
                [3.4,100,34,34,100,34,100,1,1,10,100,3.4,10,1,34,3.4,100,10,1,34,3.4,100,10,1,34,3.4,100,10,10,34,10],
                [3.4,100,34,34,1,100,3.4,100,3.4,100,10,1,34,3.4,100,10,3.4,100,10,1,100,10,1,34,10,1,34,3.4,10,34,34],
                [3.4,100,34,34,3.4,1,34,34,10,3.4,1,100,100,10,1,34,34,3.4,100,10,10,1,34,3.4,3.4,100,10,1,10,34,100],
                [1,1,100,3.4,10,3.4,10,10,100,100,100,100,3.4,1,100,34,3.4,1,100,34,3.4,1,100,34,3.4,1,100,34,10,100,1],
                [1,1,100,3.4,34,10,1,3.4,1,3.4,10,34,10,3.4,1,100,34,10,3.4,1,100,34,10,3.4,1,100,34,10,10,100,3.4],
                [1,1,100,3.4,100,34,100,1,3.4,34,1,10,34,10,3.4,1,1,100,34,10,10,3.4,1,100,100,34,10,3.4,10,100,10],
                [1,1,100,3.4,1,100,3.4,100,10,1,34,3.4,100,34,10,3.4,10,3.4,1,100,1,100,34,10,34,10,3.4,1,10,100,34],
                [1,1,100,3.4,3.4,1,34,34,34,10,3.4,1,1,100,34,10,100,34,10,3.4,34,10,3.4,1,10,3.4,1,100,10,100,100],
                [10,100,10,3.4,34,100,100,34,1,1,1,1,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,1,1],
                [10,100,10,3.4,100,1,3.4,10,3.4,10,34,100,100,100,100,100,1,1,1,1,3.4,3.4,3.4,3.4,10,10,10,10,34,1,3.4],
                [10,100,10,3.4,1,3.4,34,3.4,10,100,3.4,34,1,1,1,1,10,10,10,10,100,100,100,100,3.4,3.4,3.4,3.4,34,1,10],
                [10,100,10,3.4,3.4,10,10,1,34,3.4,100,10,3.4,3.4,3.4,3.4,100,100,100,100,10,10,10,10,1,1,1,1,34,1,34],
                [10,100,10,3.4,10,34,1,100,100,34,10,3.4,10,10,10,10,3.4,3.4,3.4,3.4,1,1,1,1,100,100,100,100,34,1,100],
                [100,1,34,100,34,100,100,34,3.4,3.4,3.4,3.4,100,1,3.4,10,100,1,3.4,10,100,1,3.4,10,100,1,3.4,10,34,3.4,1],
                [100,1,34,100,100,1,3.4,10,10,34,100,1,1,3.4,10,34,3.4,10,34,100,10,34,100,1,34,100,1,3.4,34,3.4,3.4],
                [100,1,34,100,1,3.4,34,3.4,34,1,10,100,3.4,10,34,100,34,100,1,3.4,1,3.4,10,34,10,34,100,1,34,3.4,10],
                [100,1,34,100,3.4,10,10,1,100,10,1,34,10,34,100,1,1,3.4,10,34,34,100,1,3.4,3.4,10,34,100,34,3.4,34],
                [100,1,34,100,10,34,1,100,1,100,34,10,34,100,1,3.4,10,34,100,1,3.4,10,34,100,1,3.4,10,34,34,3.4,100],
                [3.4,10,100,10,34,100,100,34,10,10,10,10,1,10,100,3.4,1,10,100,3.4,1,10,100,3.4,1,10,100,3.4,34,10,1],
                [3.4,10,100,10,100,1,3.4,10,34,100,1,3.4,3.4,34,1,10,10,100,3.4,34,34,1,10,100,100,3.4,34,1,34,10,3.4],
                [3.4,10,100,10,1,3.4,34,3.4,100,3.4,34,1,10,100,3.4,34,100,3.4,34,1,3.4,34,1,10,34,1,10,100,34,10,10],
                [3.4,10,100,10,3.4,10,10,1,1,34,3.4,100,34,1,10,100,3.4,34,1,10,100,3.4,34,1,10,100,3.4,34,34,10,34],
                [3.4,10,100,10,10,34,1,100,3.4,1,100,34,100,3.4,34,1,34,1,10,100,10,100,3.4,34,3.4,34,1,10,34,10,100],
                [1,34,3.4,1,34,100,100,34,34,34,34,34,3.4,100,10,1,3.4,100,10,1,3.4,100,10,1,3.4,100,10,1,34,34,1],
                [1,34,3.4,1,100,1,3.4,10,100,1,3.4,10,10,1,34,3.4,34,3.4,100,10,100,10,1,34,1,34,3.4,100,34,34,3.4],
                [1,34,3.4,1,1,3.4,34,3.4,1,10,100,3.4,34,3.4,100,10,1,34,3.4,100,10,1,34,3.4,100,10,1,34,34,34,10],
                [1,34,3.4,1,3.4,10,10,1,3.4,100,10,1,100,10,1,34,10,1,34,3.4,1,34,3.4,100,34,3.4,100,10,34,34,34],
                [1,34,3.4,1,10,34,1,100,10,3.4,1,100,1,34,3.4,100,100,10,1,34,34,3.4,100,10,10,1,34,3.4,34,34,100],
                [34,3.4,1,34,34,100,100,34,100,100,100,100,10,3.4,1,100,10,3.4,1,100,10,3.4,1,100,10,3.4,1,100,34,100,1],
                [34,3.4,1,34,100,1,3.4,10,1,3.4,10,34,34,10,3.4,1,100,34,10,3.4,1,100,34,10,3.4,1,100,34,34,100,3.4],
                [34,3.4,1,34,1,3.4,34,3.4,3.4,34,1,10,100,34,10,3.4,3.4,1,100,34,34,10,3.4,1,1,100,34,10,34,100,10],
                [34,3.4,1,34,3.4,10,10,1,10,1,34,3.4,1,100,34,10,34,10,3.4,1,3.4,1,100,34,100,34,10,3.4,34,100,34],
                [34,3.4,1,34,10,34,1,100,34,10,3.4,1,3.4,1,100,34,1,100,34,10,100,34,10,3.4,34,10,3.4,1,34,100,100],
                [100,34,100,34,100,10,34,100,1,1,1,1,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,1,1],
                [100,34,100,34,1,34,10,34,3.4,10,34,100,1,1,1,1,3.4,3.4,3.4,3.4,10,10,10,10,34,34,34,34,100,1,3.4],
                [100,34,100,34,3.4,100,1,10,10,100,3.4,34,3.4,3.4,3.4,3.4,34,34,34,34,1,1,1,1,10,10,10,10,100,1,10],
                [100,34,100,34,10,1,100,3.4,34,3.4,100,10,10,10,10,10,1,1,1,1,34,34,34,34,3.4,3.4,3.4,3.4,100,1,34],
                [100,34,100,34,34,3.4,3.4,1,100,34,10,3.4,34,34,34,34,10,10,10,10,3.4,3.4,3.4,3.4,1,1,1,1,100,1,100],
                [3.4,3.4,3.4,3.4,100,10,34,100,3.4,3.4,3.4,3.4,1,3.4,10,34,1,3.4,10,34,1,3.4,10,34,1,3.4,10,34,100,3.4,1],
                [3.4,3.4,3.4,3.4,1,34,10,34,10,34,100,1,3.4,10,34,100,10,34,100,1,34,100,1,3.4,100,1,3.4,10,100,3.4,3.4],
                [3.4,3.4,3.4,3.4,3.4,100,1,10,34,1,10,100,10,34,100,1,100,1,3.4,10,3.4,10,34,100,34,100,1,3.4,100,3.4,10],
                [3.4,3.4,3.4,3.4,10,1,100,3.4,100,10,1,34,34,100,1,3.4,3.4,10,34,100,100,1,3.4,10,10,34,100,1,100,3.4,34],
                [3.4,3.4,3.4,3.4,34,3.4,3.4,1,1,100,34,10,100,1,3.4,10,34,100,1,3.4,10,34,100,1,3.4,10,34,100,100,3.4,100],
                [1,100,1,100,100,10,34,100,10,10,10,10,3.4,34,1,10,3.4,34,1,10,3.4,34,1,10,3.4,34,1,10,100,10,1],
                [1,100,1,100,1,34,10,34,34,100,1,3.4,10,100,3.4,34,34,1,10,100,100,3.4,34,1,1,10,100,3.4,100,10,3.4],
                [1,100,1,100,3.4,100,1,10,100,3.4,34,1,34,1,10,100,1,10,100,3.4,10,100,3.4,34,100,3.4,34,1,100,10,10],
                [1,100,1,100,10,1,100,3.4,1,34,3.4,100,100,3.4,34,1,10,100,3.4,34,1,10,100,3.4,34,1,10,100,100,10,34],
                [1,100,1,100,34,3.4,3.4,1,3.4,1,100,34,1,10,100,3.4,100,3.4,34,1,34,1,10,100,10,100,3.4,34,100,10,100],
                [34,1,10,10,100,10,34,100,34,34,34,34,10,1,34,3.4,10,1,34,3.4,10,1,34,3.4,10,1,34,3.4,100,34,1],
                [34,1,10,10,1,34,10,34,100,1,3.4,10,34,3.4,100,10,100,10,1,34,1,34,3.4,100,3.4,100,10,1,100,34,3.4],
                [34,1,10,10,3.4,100,1,10,1,10,100,3.4,100,10,1,34,3.4,100,10,1,34,3.4,100,10,1,34,3.4,100,100,34,10],
                [34,1,10,10,10,1,100,3.4,3.4,100,10,1,1,34,3.4,100,34,3.4,100,10,3.4,100,10,1,100,10,1,34,100,34,34],
                [34,1,10,10,34,3.4,3.4,1,10,3.4,1,100,3.4,100,10,1,1,34,3.4,100,100,10,1,34,34,3.4,100,10,100,34,100],
                [10,10,34,1,100,10,34,100,100,100,100,100,34,10,3.4,1,34,10,3.4,1,34,10,3.4,1,34,10,3.4,1,100,100,1],
                [10,10,34,1,1,34,10,34,1,3.4,10,34,100,34,10,3.4,1,100,34,10,3.4,1,100,34,10,3.4,1,100,100,100,3.4],
                [10,10,34,1,3.4,100,1,10,3.4,34,1,10,1,100,34,10,10,3.4,1,100,100,34,10,3.4,3.4,1,100,34,100,100,10],
                [10,10,34,1,10,1,100,3.4,10,1,34,3.4,3.4,1,100,34,100,34,10,3.4,10,3.4,1,100,1,100,34,10,100,100,34],
                [10,10,34,1,34,3.4,3.4,1,34,10,3.4,1,10,3.4,1,100,3.4,1,100,34,1,100,34,10,100,34,10,3.4,100,100,100]])


'''
#linear 5 level PB matrix
levels=[1,2,3,4,5]
PBmat=np.array([[2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [2,1,1,1,2,2,5,5,2,3,4,5,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,1,1,2],
                [2,1,1,1,3,3,2,4,3,5,2,4,3,3,3,3,5,5,5,5,2,2,2,2,4,4,4,4,1,1,3],
                [2,1,1,1,4,4,4,3,4,2,5,3,4,4,4,4,2,2,2,2,5,5,5,5,3,3,3,3,1,1,4],
                [2,1,1,1,5,5,3,2,5,4,3,2,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2,1,1,5],
                [1,3,3,4,1,1,1,1,2,2,2,2,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,1,2,1],
                [1,3,3,4,2,2,5,5,3,4,5,1,3,4,5,1,4,5,1,2,5,1,2,3,1,2,3,4,1,2,2],
                [1,3,3,4,3,3,2,4,4,1,3,5,4,5,1,2,1,2,3,4,3,4,5,1,5,1,2,3,1,2,3],
                [1,3,3,4,4,4,4,3,5,3,1,4,5,1,2,3,3,4,5,1,1,2,3,4,4,5,1,2,1,2,4],
                [1,3,3,4,5,5,3,2,1,5,4,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,1,2,5],
                [4,4,4,2,1,1,1,1,3,3,3,3,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,1,3,1],
                [4,4,4,2,2,2,5,5,4,5,1,2,4,1,3,5,5,2,4,1,1,3,5,2,2,4,1,3,1,3,2],
                [4,4,4,2,3,3,2,4,5,2,4,1,5,2,4,1,2,4,1,3,4,1,3,5,1,3,5,2,1,3,3],
                [4,4,4,2,4,4,4,3,1,4,2,5,1,3,5,2,4,1,3,5,2,4,1,3,5,2,4,1,1,3,4],
                [4,4,4,2,5,5,3,2,2,1,5,4,2,4,1,3,1,3,5,2,5,2,4,1,4,1,3,5,1,3,5],
                [3,2,5,5,1,1,1,1,4,4,4,4,4,2,5,3,4,2,5,3,4,2,5,3,4,2,5,3,1,4,1],
                [3,2,5,5,2,2,5,5,5,1,2,3,5,3,1,4,1,4,2,5,2,5,3,1,3,1,4,2,1,4,2],
                [3,2,5,5,3,3,2,4,1,3,5,2,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,1,4,3],
                [3,2,5,5,4,4,4,3,2,5,3,1,2,5,3,1,5,3,1,4,3,1,4,2,1,4,2,5,1,4,4],
                [3,2,5,5,5,5,3,2,3,2,1,5,3,1,4,2,2,5,3,1,1,4,2,5,5,3,1,4,1,4,5],
                [5,5,2,3,1,1,1,1,5,5,5,5,5,4,3,2,5,4,3,2,5,4,3,2,5,4,3,2,1,5,1],
                [5,5,2,3,2,2,5,5,1,2,3,4,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,1,5,2],
                [5,5,2,3,3,3,2,4,2,4,1,3,2,1,5,4,4,3,2,1,1,5,4,3,3,2,1,5,1,5,3],
                [5,5,2,3,4,4,4,3,3,1,4,2,3,2,1,5,1,5,4,3,4,3,2,1,2,1,5,4,1,5,4],
                [5,5,2,3,5,5,3,2,4,3,2,1,4,3,2,1,3,2,1,5,2,1,5,4,1,5,4,3,1,5,5],
                [1,2,4,3,2,4,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,2,4,3,3,5,4,1,2,3,4,5,3,3,3,3,4,4,4,4,5,5,5,5,1,1,1,1,2,1,2],
                [1,2,4,3,4,1,3,5,3,5,2,4,4,4,4,4,1,1,1,1,3,3,3,3,5,5,5,5,2,1,3],
                [1,2,4,3,5,2,1,4,4,2,5,3,5,5,5,5,3,3,3,3,1,1,1,1,4,4,4,4,2,1,4],
                [1,2,4,3,1,3,5,3,5,4,3,2,1,1,1,1,5,5,5,5,4,4,4,4,3,3,3,3,2,1,5],
                [4,5,5,1,2,4,2,2,2,2,2,2,3,4,5,1,3,4,5,1,3,4,5,1,3,4,5,1,2,2,1],
                [4,5,5,1,3,5,4,1,3,4,5,1,4,5,1,2,5,1,2,3,1,2,3,4,2,3,4,5,2,2,2],
                [4,5,5,1,4,1,3,5,4,1,3,5,5,1,2,3,2,3,4,5,4,5,1,2,1,2,3,4,2,2,3],
                [4,5,5,1,5,2,1,4,5,3,1,4,1,2,3,4,4,5,1,2,2,3,4,5,5,1,2,3,2,2,4],
                [4,5,5,1,1,3,5,3,1,5,4,3,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,2,2,5],
                [3,1,2,4,2,4,2,2,3,3,3,3,4,1,3,5,4,1,3,5,4,1,3,5,4,1,3,5,2,3,1],
                [3,1,2,4,3,5,4,1,4,5,1,2,5,2,4,1,1,3,5,2,2,4,1,3,3,5,2,4,2,3,2],
                [3,1,2,4,4,1,3,5,5,2,4,1,1,3,5,2,3,5,2,4,5,2,4,1,2,4,1,3,2,3,3],
                [3,1,2,4,5,2,1,4,1,4,2,5,2,4,1,3,5,2,4,1,3,5,2,4,1,3,5,2,2,3,4],
                [3,1,2,4,1,3,5,3,2,1,5,4,3,5,2,4,2,4,1,3,1,3,5,2,5,2,4,1,2,3,5],
                [5,3,1,2,2,4,2,2,4,4,4,4,5,3,1,4,5,3,1,4,5,3,1,4,5,3,1,4,2,4,1],
                [5,3,1,2,3,5,4,1,5,1,2,3,1,4,2,5,2,5,3,1,3,1,4,2,4,2,5,3,2,4,2],
                [5,3,1,2,4,1,3,5,1,3,5,2,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,2,4,3],
                [5,3,1,2,5,2,1,4,2,5,3,1,3,1,4,2,1,4,2,5,4,2,5,3,2,5,3,1,2,4,4],
                [5,3,1,2,1,3,5,3,3,2,1,5,4,2,5,3,3,1,4,2,2,5,3,1,1,4,2,5,2,4,5],
                [2,4,3,5,2,4,2,2,5,5,5,5,1,5,4,3,1,5,4,3,1,5,4,3,1,5,4,3,2,5,1],
                [2,4,3,5,3,5,4,1,1,2,3,4,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,2,5,2],
                [2,4,3,5,4,1,3,5,2,4,1,3,3,2,1,5,5,4,3,2,2,1,5,4,4,3,2,1,2,5,3],
                [2,4,3,5,5,2,1,4,3,1,4,2,4,3,2,1,2,1,5,4,5,4,3,2,3,2,1,5,2,5,4],
                [2,4,3,5,1,3,5,3,4,3,2,1,5,4,3,2,4,3,2,1,3,2,1,5,2,1,5,4,2,5,5],
                [4,3,2,5,3,2,3,3,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1],
                [4,3,2,5,4,3,1,2,2,3,4,5,4,4,4,4,5,5,5,5,1,1,1,1,2,2,2,2,3,1,2],
                [4,3,2,5,5,4,5,1,3,5,2,4,5,5,5,5,2,2,2,2,4,4,4,4,1,1,1,1,3,1,3],
                [4,3,2,5,1,5,2,5,4,2,5,3,1,1,1,1,4,4,4,4,2,2,2,2,5,5,5,5,3,1,4],
                [4,3,2,5,2,1,4,4,5,4,3,2,2,2,2,2,1,1,1,1,5,5,5,5,4,4,4,4,3,1,5],
                [3,4,1,3,3,2,3,3,2,2,2,2,4,5,1,2,4,5,1,2,4,5,1,2,4,5,1,2,3,2,1],
                [3,4,1,3,4,3,1,2,3,4,5,1,5,1,2,3,1,2,3,4,2,3,4,5,3,4,5,1,3,2,2],
                [3,4,1,3,5,4,5,1,4,1,3,5,1,2,3,4,3,4,5,1,5,1,2,3,2,3,4,5,3,2,3],
                [3,4,1,3,1,5,2,5,5,3,1,4,2,3,4,5,5,1,2,3,3,4,5,1,1,2,3,4,3,2,4],
                [3,4,1,3,2,1,4,4,1,5,4,3,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,3,2,5],
                [5,2,3,1,3,2,3,3,3,3,3,3,5,2,4,1,5,2,4,1,5,2,4,1,5,2,4,1,3,3,1],
                [5,2,3,1,4,3,1,2,4,5,1,2,1,3,5,2,2,4,1,3,3,5,2,4,4,1,3,5,3,3,2],
                [5,2,3,1,5,4,5,1,5,2,4,1,2,4,1,3,4,1,3,5,1,3,5,2,3,5,2,4,3,3,3],
                [5,2,3,1,1,5,2,5,1,4,2,5,3,5,2,4,1,3,5,2,4,1,3,5,2,4,1,3,3,3,4],
                [5,2,3,1,2,1,4,4,2,1,5,4,4,1,3,5,3,5,2,4,2,4,1,3,1,3,5,2,3,3,5],
                [2,5,4,4,3,2,3,3,4,4,4,4,1,4,2,5,1,4,2,5,1,4,2,5,1,4,2,5,3,4,1],
                [2,5,4,4,4,3,1,2,5,1,2,3,2,5,3,1,3,1,4,2,4,2,5,3,5,3,1,4,3,4,2],
                [2,5,4,4,5,4,5,1,1,3,5,2,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,3,4,3],
                [2,5,4,4,1,5,2,5,2,5,3,1,4,2,5,3,2,5,3,1,5,3,1,4,3,1,4,2,3,4,4],
                [2,5,4,4,2,1,4,4,3,2,1,5,5,3,1,4,4,2,5,3,3,1,4,2,2,5,3,1,3,4,5],
                [1,1,5,2,3,2,3,3,5,5,5,5,2,1,5,4,2,1,5,4,2,1,5,4,2,1,5,4,3,5,1],
                [1,1,5,2,4,3,1,2,1,2,3,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,3,5,2],
                [1,1,5,2,5,4,5,1,2,4,1,3,4,3,2,1,1,5,4,3,3,2,1,5,5,4,3,2,3,5,3],
                [1,1,5,2,1,5,2,5,3,1,4,2,5,4,3,2,3,2,1,5,1,5,4,3,4,3,2,1,3,5,4],
                [1,1,5,2,2,1,4,4,4,3,2,1,1,5,4,3,5,4,3,2,4,3,2,1,3,2,1,5,3,5,5],
                [3,5,3,2,4,5,5,4,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1],
                [3,5,3,2,5,1,2,3,2,3,4,5,5,5,5,5,1,1,1,1,2,2,2,2,3,3,3,3,4,1,2],
                [3,5,3,2,1,2,4,2,3,5,2,4,1,1,1,1,3,3,3,3,5,5,5,5,2,2,2,2,4,1,3],
                [3,5,3,2,2,3,3,1,4,2,5,3,2,2,2,2,5,5,5,5,3,3,3,3,1,1,1,1,4,1,4],
                [3,5,3,2,3,4,1,5,5,4,3,2,3,3,3,3,2,2,2,2,1,1,1,1,5,5,5,5,4,1,5],
                [5,1,4,5,4,5,5,4,2,2,2,2,5,1,2,3,5,1,2,3,5,1,2,3,5,1,2,3,4,2,1],
                [5,1,4,5,5,1,2,3,3,4,5,1,1,2,3,4,2,3,4,5,3,4,5,1,4,5,1,2,4,2,2],
                [5,1,4,5,1,2,4,2,4,1,3,5,2,3,4,5,4,5,1,2,1,2,3,4,3,4,5,1,4,2,3],
                [5,1,4,5,2,3,3,1,5,3,1,4,3,4,5,1,1,2,3,4,4,5,1,2,2,3,4,5,4,2,4],
                [5,1,4,5,3,4,1,5,1,5,4,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,4,2,5],
                [2,3,5,3,4,5,5,4,3,3,3,3,1,3,5,2,1,3,5,2,1,3,5,2,1,3,5,2,4,3,1],
                [2,3,5,3,5,1,2,3,4,5,1,2,2,4,1,3,3,5,2,4,4,1,3,5,5,2,4,1,4,3,2],
                [2,3,5,3,1,2,4,2,5,2,4,1,3,5,2,4,5,2,4,1,2,4,1,3,4,1,3,5,4,3,3],
                [2,3,5,3,2,3,3,1,1,4,2,5,4,1,3,5,2,4,1,3,5,2,4,1,3,5,2,4,4,3,4],
                [2,3,5,3,3,4,1,5,2,1,5,4,5,2,4,1,4,1,3,5,3,5,2,4,2,4,1,3,4,3,5],
                [1,4,2,1,4,5,5,4,4,4,4,4,2,5,3,1,2,5,3,1,2,5,3,1,2,5,3,1,4,4,1],
                [1,4,2,1,5,1,2,3,5,1,2,3,3,1,4,2,4,2,5,3,5,3,1,4,1,4,2,5,4,4,2],
                [1,4,2,1,1,2,4,2,1,3,5,2,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,4,4,3],
                [1,4,2,1,2,3,3,1,2,5,3,1,5,3,1,4,3,1,4,2,1,4,2,5,4,2,5,3,4,4,4],
                [1,4,2,1,3,4,1,5,3,2,1,5,1,4,2,5,5,3,1,4,4,2,5,3,3,1,4,2,4,4,5],
                [4,2,1,4,4,5,5,4,5,5,5,5,3,2,1,5,3,2,1,5,3,2,1,5,3,2,1,5,4,5,1],
                [4,2,1,4,5,1,2,3,1,2,3,4,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,4,5,2],
                [4,2,1,4,1,2,4,2,2,4,1,3,5,4,3,2,2,1,5,4,4,3,2,1,1,5,4,3,4,5,3],
                [4,2,1,4,2,3,3,1,3,1,4,2,1,5,4,3,4,3,2,1,2,1,5,4,5,4,3,2,4,5,4],
                [4,2,1,4,3,4,1,5,4,3,2,1,2,1,5,4,1,5,4,3,5,4,3,2,4,3,2,1,4,5,5],
                [5,4,5,4,5,3,4,5,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1],
                [5,4,5,4,1,4,3,4,2,3,4,5,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,1,2],
                [5,4,5,4,2,5,1,3,3,5,2,4,2,2,2,2,4,4,4,4,1,1,1,1,3,3,3,3,5,1,3],
                [5,4,5,4,3,1,5,2,4,2,5,3,3,3,3,3,1,1,1,1,4,4,4,4,2,2,2,2,5,1,4],
                [5,4,5,4,4,2,2,1,5,4,3,2,4,4,4,4,3,3,3,3,2,2,2,2,1,1,1,1,5,1,5],
                [2,2,2,2,5,3,4,5,2,2,2,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,2,1],
                [2,2,2,2,1,4,3,4,3,4,5,1,2,3,4,5,3,4,5,1,4,5,1,2,5,1,2,3,5,2,2],
                [2,2,2,2,2,5,1,3,4,1,3,5,3,4,5,1,5,1,2,3,2,3,4,5,4,5,1,2,5,2,3],
                [2,2,2,2,3,1,5,2,5,3,1,4,4,5,1,2,2,3,4,5,5,1,2,3,3,4,5,1,5,2,4],
                [2,2,2,2,4,2,2,1,1,5,4,3,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,5,2,5],
                [1,5,1,5,5,3,4,5,3,3,3,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4,1,3,5,3,1],
                [1,5,1,5,1,4,3,4,4,5,1,2,3,5,2,4,4,1,3,5,5,2,4,1,1,3,5,2,5,3,2],
                [1,5,1,5,2,5,1,3,5,2,4,1,4,1,3,5,1,3,5,2,3,5,2,4,5,2,4,1,5,3,3],
                [1,5,1,5,3,1,5,2,1,4,2,5,5,2,4,1,3,5,2,4,1,3,5,2,4,1,3,5,5,3,4],
                [1,5,1,5,4,2,2,1,2,1,5,4,1,3,5,2,5,2,4,1,4,1,3,5,3,5,2,4,5,3,5],
                [4,1,3,3,5,3,4,5,4,4,4,4,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,5,4,1],
                [4,1,3,3,1,4,3,4,5,1,2,3,4,2,5,3,5,3,1,4,1,4,2,5,2,5,3,1,5,4,2],
                [4,1,3,3,2,5,1,3,1,3,5,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,5,4,3],
                [4,1,3,3,3,1,5,2,2,5,3,1,1,4,2,5,4,2,5,3,2,5,3,1,5,3,1,4,5,4,4],
                [4,1,3,3,4,2,2,1,3,2,1,5,2,5,3,1,1,4,2,5,5,3,1,4,4,2,5,3,5,4,5],
                [3,3,4,1,5,3,4,5,5,5,5,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,5,1],
                [3,3,4,1,1,4,3,4,1,2,3,4,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,5,5,2],
                [3,3,4,1,2,5,1,3,2,4,1,3,1,5,4,3,3,2,1,5,5,4,3,2,2,1,5,4,5,5,3],
                [3,3,4,1,3,1,5,2,3,1,4,2,2,1,5,4,5,4,3,2,3,2,1,5,1,5,4,3,5,5,4],
                [3,3,4,1,4,2,2,1,4,3,2,1,3,2,1,5,2,1,5,4,1,5,4,3,5,4,3,2,5,5,5]])

'''



#Copies the PB adding error to each value. 
def addVar(initPB,var,shift,shiftL,tVar):

    #shift variable "shift" by 5X if expressed at "shiftL"

    #creates matrix with value 1 when == shiftL; else 0 then uses that to increase the values 5 fold
    modPB=initPB*0
    for x in range(len(shift)):
        
        tempPB = np.abs(np.sign(np.sign(np.mod(initPB,shiftL[x]))+np.sign(np.mod(shiftL[x],initPB)))-1)

        L=[]
        for z in range(len(initPB[0])):
            if z==shift[x]:
                L.append(4)
            else:
                L.append(0)
        Z=[]
        for z in range(len(initPB)):
            Z.append(L)

        modPB=modPB + np.multiply(tempPB,np.array(Z))
    shiftPB=np.multiply(initPB,modPB+1)
    
        
    #Shifts every value according to normal distribution.
    varPB = np.random.normal(shiftPB,np.multiply(shiftPB,var))

    tVarArr = np.zeros(len(varPB))
    tVarArr= np.random.normal(tVarArr,tVar)+100

    #"Real" expression is floored at 0
    varPB[varPB<0] = 0

    return(varPB,tVarArr)


#Calculates the outputs (and measured output) for theoretical and "actual" cases
def measure(initPB,varPB,mVar,tV):

    #Calculate the theoretical measured result assuming perfect knowledge of levels
    outTheo = functions(initPB,100)

    #Calculate the true output using the values varied earlier
    outTrue = functions(varPB,tV)

    #add measurement error
    outMeas=[]
    for x in outTrue:

        outMeas.append(np.random.normal(x,np.multiply(abs(x),mVar)))

    return(outTheo,outMeas)

#uses a linear fit for the PB to determine effect sizes (assuming the linear function as PB does)
def linearFit(outMeas,PBmat):

    Constants=[]
    sigs=[]
    AllP=[]
    pVfDa=[]
    deduced=[]

    for a in range(len(outMeas)):

        B = []
        sigB = []
        
        for b in range(PBmat.shape[1]):



            N=len(outMeas[a])
            sumXY = np.sum(np.multiply(PBmat[:,b],outMeas[a]))
            delXY =  np.multiply(N,np.sum(np.multiply(PBmat[:,b],PBmat[:,b]))) - (np.sum(PBmat[:,b]))**2
            C = (np.sum(np.multiply(PBmat[:,b],PBmat[:,b]))*np.sum(outMeas[a]) - np.sum(PBmat[:,b])*sumXY)/delXY
            M = (N * sumXY - np.sum(PBmat[:,b])*np.sum(outMeas[a]))/delXY

            sigS = np.subtract(np.subtract(np.subtract(outMeas[a],C),M),PBmat[:,b])

            sigY = (1/(N-2)*np.sum(np.multiply(sigS,sigS)))**(1/2)

            B.append(M)
            sigB.append(sigY*(N/delXY)*(1/2))
            
        Constants.append(B)
        sigs.append(sigB)

        #Calculates P-values from t values from https://doi.org/10.1016/0003-2670(95)00349-5
        #Assumes 8 real variables
        SEd = (np.sum(np.multiply(np.array(B),np.array(B))[8:])/len(B[8:]))**(1/2)

        if SEd==0:
            tScore=np.divide(np.abs(np.array(B)),0.000001)
        else:
            tScore=np.divide(np.abs(np.array(B)),SEd)
        pVfD=[]
        for q in tScore:
            pVfD.append(scipy.stats.t.sf(abs(q),len(B[8:]))*2)

        pVfDa.append(pVfD)
        expr = B[0]*x0 + B[1]*x1 + B[2]*x2 + B[3]*x3 + B[4]*x4 + B[5]*x5 + B[6]*x6 + B[7]*x7 + B[8]*x8 + B[9]*x9 + B[10]*x10 + B[11]*x11 + B[12]*x12 + B[13]*x13 + B[14]*x14 + B[15]*x15 + B[16]*x16 + B[17]*x17 + B[18]*x18 + B[19]*x19 + B[20]*x20 + B[21]*x21 + B[22]*x22 + B[23]*x23 + B[24]*x24 + B[25]*x25 + B[26]*x26 + B[27]*x27 + B[28]*x28 + B[29]*x29 + B[30]*x30
        deduced.append(expr)
        

    return(Constants,sigs,pVfDa,deduced)


#Function for PB on 1 parameter set and 1 replicate but for all functions
def oneRun(PBmat,var,shift,shiftL,mVar,tVar,ths):

    varPB,tVarArr = addVar(PBmat, var,shift,shiftL,tVar)
    outTheo,outMeas = measure(PBmat,varPB, mVar, tVarArr)

    Constants,sigs,pVfD,deduced = linearFit(outMeas, PBmat)

    L=[]

    for z in range(len(outMeas)):

        arr=(1-np.sign(np.array(pVfD[z])-ths))/2
        mArr=np.multiply(arr,np.array([4,2,1,0.5,0.25,0.125,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))
        try:
            minZ = np.min(mArr[np.nonzero(mArr)])
        except:
            minZ = np.nan
        L.append([z,float(var),float(mVar),float(tVar),len(shift),len(shiftL),Constants[z],sigs[z],pVfD[z],arr,minZ])

    
    return(pd.DataFrame(L,columns=['f_','Var','measErr','tErr','Shift','Shifted','Constants','sigs','pVfD','significant','lowSig']))


#Function for the heatmap. Change vmin/vmax if necessary
def draw_heatmap(*args, **kwargs):
    data = kwargs.pop('data')
    d = data.pivot('measErr', 'Var', 'lowSig')
    sns.heatmap(d, vmin=-4,vmax=2, **kwargs)

#core plotting function
def plottingV2(df):

    g = sns.FacetGrid(df, col='f_',row='Shift', margin_titles=True, sharey=True)

    cbar_ax = g.fig.add_axes([.91, .15, .03, .7])
    g = g.map_dataframe(draw_heatmap, 'Var', 'measErr', 'lowSig',
                    cmap='Spectral_r', cbar_ax=cbar_ax, cbar_kws={'label': 'color_bar_label'},square=True)

    plt.show()

    return





#main loop

x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,t = symbols('x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 t')

df = pd.DataFrame([['','','','','','','','','','']],columns=['f_','Var','measErr','tErr','Shift','Shifted','Constants','sigs','pVfD','significant'])

count=0
#Repeats/condition
bar = ChargingBar('Processing', max = reps*len(varL)*len(mVarL)*len(tVarL)*len(numShifted),suffix = '%(percent).1f%% - %(eta)ds')
for z in range(reps):

    
    for a in range(len(varL)):
        for b in range(len(mVarL)):
            for c in range(len(tVarL)):
                for d in range(len(numShifted)):

                    shift=[]
                    shiftL=[]
                    for e in range(numShifted[d]):
                        shift.append(random.randrange(8))
                        shiftL.append(levels[random.randrange(len(levels))])

            #print(100*count/(reps*len(varL)*len(mVarL)))

                    df=pd.concat([df,oneRun(PBmat,varL[a],shift,shiftL,mVarL[b],tVarL[c],ths)])

                    count+=1

                    bar.next()

bar.finish()

df = df.iloc[1:,:]

df.to_csv('all.csv')
df=df.groupby(['f_','Var','measErr','Shift']).agg({'lowSig': 'mean'}).reset_index()
df.to_csv('IntError.csv')

if log==True:
    df['lowSig']=np.log2(df['lowSig'])


plottingV2(df)



#/main loop

#skip run and just plot
'''
df = pd.read_csv('all.csv')
df=df.groupby(['f_','Var','measErr','Shift']).agg({'lowSig': 'mean'}).reset_index()
df.to_csv('IntError.csv')
if log==True:
    df['lowSig']=np.log2(df['lowSig'])
plottingV2(df)
'''
